plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.3"
    id 'info.solidsoft.pitest' version '1.7.4'
    id 'org.jsonschema2dataclass' version '4.2.0'
}


def versions = [
        mapstructVersion                   : '1.3.1.Final',
        sentryVersion                      : '5.6.1',
        springdocVersion                   : '1.6.6',
        postgresqlVersion                  : '42.3.3',
        gsonVersion                        : '2.8.6',
        commonsLang3Version                : '3.10',
        lombokVersion                      : '1.18.6',
        sonarVersion                       : '2.7',
        h2DBVersion                        : '1.4.200',
        mockitoVersion                     : '3.3.3',
        junitVersion                       : '4.13',
        harmcrestVersion                   : '1.3',
        testngVersion                      : '6.10',
        festVersion                        : '1.4',
        gradlePitest                       : '1.4.6',
        pitest                             : '1.4.10',
        sonarPitest                        : '0.5',
        liquibase                          : '4.6.1',
        commonsCollections4Version         : '4.4',
        springConfigurationProcessorVersion: '2.6.3',
        reactorTestVersion                 : '3.4.11',
        okhttpVersion                      : '4.9.3',
        mockwebserverVersion               : '4.9.3',
        springauthserverVersion            : '0.2.2'
]

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.6.6"
        mavenBom "org.springframework:spring-framework-bom:5.3.18"
        mavenBom "com.amazonaws:aws-java-sdk-bom:1.12.225"
        mavenBom "org.springframework.security:spring-security-bom:5.6.2"
    }
    dependencies {
        dependencySet(group: 'io.sentry', version: versions.sentryVersion) {
            entry 'sentry-spring-boot-starter'
            entry 'sentry-logback'
        }
        dependencySet(group: 'org.mapstruct', version: versions.mapstructVersion) {
            entry 'mapstruct'
            entry 'mapstruct-processor'
        }
    }
}
group = 'uk.gov.justice.laa.crime'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    // Spring
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'
    implementation group: 'org.springframework.security', name: 'spring-security-cas'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-authorization-server', version: versions.springauthserverVersion
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springdocVersion

    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: versions.springConfigurationProcessorVersion

    implementation group: 'io.projectreactor.netty', name: 'reactor-netty'

    // AWS
    implementation group: 'org.mapstruct', name: 'mapstruct'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor'

    implementation group: 'io.sentry', name: 'sentry-spring-boot-starter'
    implementation group: 'io.sentry', name: 'sentry-logback'

    // DB Dependencies
    implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresqlVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

    // Utility Libraries
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: versions.commonsCollections4Version

    // Metrics
    runtimeOnly group: 'io.micrometer', name: 'micrometer-registry-prometheus'

    //liquibase - DB versioning and change tracking
    implementation group: 'org.liquibase', name: 'liquibase-core', version: versions.liquibase

    implementation group: 'com.google.code.gson', name: 'gson', version: versions.gsonVersion
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3Version

    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion


    implementation group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: versions.sonarVersion

    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest

    // Test Only
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation group: 'com.h2database', name: 'h2', version: versions.h2DBVersion
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: versions.mockitoVersion
    testImplementation group: 'junit', name: 'junit', version: versions.junitVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: versions.harmcrestVersion
    testImplementation group: 'org.testng', name: 'testng', version: versions.testngVersion
    testImplementation group: 'org.easytesting', name: 'fest-assert', version: versions.festVersion
    testImplementation group: 'io.projectreactor', name: 'reactor-test', version: versions.reactorTestVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttpVersion
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: versions.mockwebserverVersion
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
}

jar {
    enabled = false
}


test {
    dependsOn 'cleanTest'
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/entity/**',
                            '**/dto/**',
                            '**/config/**'
                    ])
        }))
    }

}

pitest {
    targetClasses = ['uk.gov.justice.laa.crime.meansassessment.*']
    excludedClasses = ['uk.gov.justice.laa.crime.meansassessment.dto.*', 'uk.gov.justice.laa.crime.meansassessment.mapper.*', 'uk.gov.justice.laa.crime.meansassessment.CrimeMeansAssessmentApplication']
    threads = 5
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 60
}

tasks['sonarqube'].dependsOn test

sonarqube {
    properties {
        property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java, **/**StoredProcedureRepository.java"
        property "sonar.coverage.exclusions", "**/CrimeMeansAssessmentApplication.java"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.projectKey", "ministryofjustice_laa-crime-means-assessment"
        property "sonar.organization", "ministryofjustice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "Crime Apps :: crime-means-assessment"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"

    }
}

jsonSchema2Pojo {
    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source.setFrom files("${project.rootDir}/src/main/resources/schemas")
    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
//    targetDirectoryPrefix = file("${project.buildDir}/temporaryJsonToPojo/sources/js2d")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'uk.gov.justice.laa.crime.meansassessment.model.common'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    generateBuilders = true
    useInnerClassBuilders = true
    includeJsr303Annotations = true
    useBigDecimals = true
    includeDynamicBuilders = true
    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"
}