version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  kubernetes: circleci/kubernetes@1.3.0
  helm: circleci/helm@1.2.0

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

# ------------------
# COMMANDS
# ------------------
commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key

  deploy-to:
    description: >
        Deploy image to the specified environment
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - checkout_and_decrypt
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=<< parameters.token >>
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=laa-crime-means-assessment-<< parameters.environment >>
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=laa-crime-means-assessment-<< parameters.environment >> get pods
      - helm/upgrade-helm-chart:
          namespace: laa-crime-means-assessment-<< parameters.environment >>
          update-repositories: false
          chart: ./helm_deploy/laa-crime-means-assessment/
          release-name: laa-crime-means-assessment
          values: ./helm_deploy/laa-crime-means-assessment/values-<< parameters.environment >>.yaml
          values-to-override: image.tag=${CIRCLE_SHA1}

# ------------------
# JOBS
# ------------------
jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:11.0.13
    working_directory: ~/laa-crime-means-assessment/crime-means-assessment
    steps:
      - checkout:
          path: ~/laa-crime-means-assessment
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install Dependencies
          command: ./gradlew build -x test
      - run:
          name: Run SonarQube
          command: ./gradlew sonarqube -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.organization=${SONAR_ORG}
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build

  test_and_assemble:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:11.0.13
    working_directory: ~/laa-crime-means-assessment/crime-means-assessment
    steps:
      - checkout:
          path: ~/laa-crime-means-assessment
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests
          command: ./gradlew test
      - run:
          name: Generate code coverage report
          command: ./gradlew jacocoTestReport
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/jacoco/test/html
      - run:
          name: Assemble JAR
          command: ./gradlew assemble
      - store_artifacts:
          path: build/libs

  build_and_push_image:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          repo: laa-crime-apps-team/laa-crime-means-assessment-dev-ecr
          tag: "${CIRCLE_SHA1}"
          attach-workspace: true
          workspace-root: crime-means-assessment
          path: crime-means-assessment
          extra-build-args: |
            --build-arg COMMIT_ID=${CIRCLE_SHA1} \
            --build-arg BUILD_TAG=${CIRCLE_SHA1} \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev
          token: ${CIRCLE_CI_TOKEN_DEV}

  deploy-test:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: test
          token: ${CIRCLE_CI_TOKEN_TEST}

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: uat
          token: ${CIRCLE_CI_TOKEN_UAT}

  deploy-staging:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: staging
          token: ${CIRCLE_CI_TOKEN_STAGING}

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: prod
          token: ${CIRCLE_CI_TOKEN_PROD}

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2

  build-master-branch:
        when:
          equal: [ main, << pipeline.git.branch >> ]
        jobs:
          - build

  build-deploy-branch:
    jobs:

      - branch_build_approval:
          type: approval
          filters:
            branches:
              ignore:
                - main

      - build:
          requires:
            - branch_build_approval

      - test_and_assemble:
          requires:
            - build

      - build_and_push_image:
          requires:
            - test_and_assemble

      - hold_install_on_dev:
          type: approval
          requires:
            - build_and_push_image

      - deploy-dev:
          requires:
            - hold_install_on_dev

      - hold_install_on_test:
          type: approval
          requires:
            - build_and_push_image

      - deploy-test:
          requires:
            - hold_install_on_test

      - hold_install_on_uat:
          type: approval
          requires:
            - build_and_push_image

      - deploy-uat:
          requires:
            - hold_install_on_uat

      - hold_install_on_staging:
          type: approval
          requires:
            - build_and_push_image

      - deploy-staging:
          requires:
            - hold_install_on_staging

      - hold_install_on_prod:
          type: approval
          requires:
            - build_and_push_image
          filters:
            branches:
              only:
                - main

      - deploy-prod:
          requires:
            - hold_install_on_prod