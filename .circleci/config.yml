version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@7.2.0
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.1
  helm: circleci/helm@1.2.0

commands:
  checkout_and_decrypt:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install git-crypt
      - run: echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
      - run: git-crypt unlock git-crypt.key

jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:11.0.13
    working_directory: ~/laa-crime-means-assessment/crime-means-assessment
    steps:
      - checkout:
          path: ~/laa-crime-means-assessment
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install Dependencies
          command: ./gradlew build -x test
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build

  test:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:11.0.13
    working_directory: ~/laa-crime-means-assessment/crime-means-assessment
    steps:
      - checkout:
          path: ~/laa-crime-means-assessment
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests
          command: ./gradlew test
      - run:
          name: Generate code coverage report
          command: ./gradlew jacocoTestReport
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/jacoco/test/html
      - run:
          name: Assemble JAR
          command: ./gradlew assemble
      - store_artifacts:
          path: build/libs

  push-app:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          repo: laa-crime-means-assessment/crime-means-assessment
          tag: "${CIRCLE_SHA1}"
          attach-workspace: true
          workspace-root: crime-means-assessment
          extra-build-args: |
            --build-arg COMMIT_ID=${CIRCLE_SHA1} \
            --build-arg BUILD_TAG=${CIRCLE_SHA1} \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \


  install_on_dev:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_DEV
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'      
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_DEV}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
      - helm/upgrade-helm-chart:
          namespace: laa-crime-means-assessment-dev
          update-repositories: false
          chart: ./helm_deploy/laa-crime-means-assessment/
          release-name: laa-crime-means-assessment
          values: ./helm_deploy/laa-crime-means-assessment/values-dev.yaml
          values-to-override: image.tag=${CIRCLE_SHA1}

  install_on_test:
    executor: aws-eks/python
    steps:
      - checkout_and_decrypt
      - kubernetes/install-kubeconfig:
          kubeconfig: ENCODED_KUBECONFIG_DEV
      - kubernetes/install-kubectl
      - helm/install-helm-client:
          version: 'v3.2.4'
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt
            kubectl config set-credentials circleci --token=${CIRCLE_CI_TOKEN_DEV}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
      - helm/upgrade-helm-chart:
          namespace: laa-crime-means-assessment-test
          update-repositories: false
          chart: ./helm_deploy/laa-crime-means-assessment/
          release-name: laa-crime-means-assessment
          values: ./helm_deploy/laa-crime-means-assessment/values-test.yaml
          values-to-override: image.tag=${CIRCLE_SHA1}

workflows:

  build-deploy-branch:
    jobs:
      - branch_build_approval:
          type: approval
          filters:
            branches:
              ignore:
                - main
      - build:
          requires:
            - branch_build_approval
      - test:
          requires:
            - build

      - push-app:
          requires:
            - test

      - hold_install_on_dev:
          type: approval
          requires:
          - push-app

      - install_on_dev:
          requires:
          - hold_install_on_dev

      - hold_install_on_test:
          type: approval
          requires:
            - install_on_dev

      - install_on_test:
          requires:
            - hold_install_on_test
